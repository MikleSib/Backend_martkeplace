import httpx
from typing import Optional
import logging

logger = logging.getLogger(__name__)

# Telegram bot credentials
TELEGRAM_BOT_TOKEN = "7668995111:AAFwYME1gQX6kd5kfsEKg4l0kYQt_iFQI-U"
TELEGRAM_CHAT_ID = "-4744201336"

async def send_telegram_notification(message: str, parse_mode: str = "Markdown") -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown –∏–ª–∏ HTML)
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": TELEGRAM_CHAT_ID,
                    "text": message,
                    "parse_mode": parse_mode
                }
            )
            telegram_result = response.json()
            
            if not telegram_result.get("ok", False):
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {telegram_result}")
                return False
            
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        return False

async def send_user_registration_notification(username: str, user_id: int, email: str, forum_url: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = f"""
üéâ *–ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø* üéâ

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {username} (ID: {user_id})
*Email:* {email}
*–î–∞—Ç–∞:* {datetime.now().strftime("%d.%m.%Y %H:%M")}

*–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {forum_url}/user/{user_id}
"""
    return await send_telegram_notification(message)

async def send_topic_creation_notification(
    topic_title: str, 
    topic_id: int, 
    category_title: str,
    author_username: str, 
    author_id: int,
    content_preview: str,
    forum_url: str
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç–µ–º—ã"""
    message = f"""
üìù *–ù–û–í–ê–Ø –¢–ï–ú–ê –ù–ê –§–û–†–£–ú–ï* üìù

*–ê–≤—Ç–æ—Ä:* {author_username} (ID: {author_id})
*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {topic_title}
*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category_title}
*ID —Ç–µ–º—ã:* {topic_id}

*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*
```
{content_preview}
```

*–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É:* {forum_url}/topics/{topic_id}
"""
    return await send_telegram_notification(message)

async def send_post_creation_notification(
    post_id: int,
    topic_title: str,
    topic_id: int,
    author_username: str,
    author_id: int,
    content_preview: str,
    forum_url: str,
    is_topic_starter: bool = False
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if is_topic_starter:
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–ª—è —Ç–µ–º—ã
        return True
        
    message = f"""
üí¨ *–ù–û–í–´–ô –ü–û–°–¢ –ù–ê –§–û–†–£–ú–ï* üí¨

*–ê–≤—Ç–æ—Ä:* {author_username} (ID: {author_id})
*–¢–µ–º–∞:* {topic_title}
*ID –ø–æ—Å—Ç–∞:* {post_id}

*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*
```
{content_preview}
```

*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:* {forum_url}/topics/{topic_id}?post={post_id}
"""
    return await send_telegram_notification(message)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
from datetime import datetime 